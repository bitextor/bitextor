name: Intensive tests with docker

on:
   schedule:
      - cron: '0 3 * * 0'
   workflow_dispatch:
      inputs:
         docker_tag:
            description: 'Tag which will be looked for'
            required: false
            default: 'edge'
         create_build:
            type: boolean
            description: 'Create build instead of downloading an image'
            default: true
         build_ref:
            description: 'Ref to use when local build is created (i.e. branch, tag or commit)'
            default: 'master'
         test_id:
            description: 'Run specific test ID'
            required: false
            default: 'all'
            type: choice
            options:
               - 'all'
               - '0x01'
               - '0x02'
               - '0x04'
               - '0x08'
               - '0x10'
               - '0x20'
               - '0x40'
               - '0x80'

env:
   WORK: ${{ github.workspace }}
   WORK_DOCKER: '/home/docker'
   TEST_ID: ${{ github.event.inputs.test_id || 'all' }}
   DOCKER_IMAGE_TAG: ${{ format('bitextor/bitextor:{0}', github.event.inputs.docker_tag || 'edge') }}
   CREATE_BUILD: ${{ fromJSON(github.event.inputs.create_build || 'true') }}

jobs:
   tests:
      name: ${{ matrix.name }}
      runs-on: ubuntu-20.04
      timeout-minutes: 1440
      strategy:
         fail-fast: false # Continue even when a matrix job fails in order to detect as many errors as possible
         matrix:
            include:
               - name: Tests MT
                 test_id: "0x01"
               - name: Tests dictionary based
                 test_id: "0x02"
               - name: Tests generate dictionary
                 test_id: "0x04"
               - name: Tests generate bicleaner model
                 test_id: "0x08"
               - name: Tests generate dictionary and bicleaner model
                 test_id: "0x10"
               - name: Tests combining dictionaries and MT
                 test_id: "0x20"
               - name: Tests neural
                 test_id: "0x40"
               - name: Other tests
                 test_id: "0x80"
      steps:
      -  uses: actions/checkout@v3
         if: ${{ env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id }}
         with:
            submodules: 'recursive'
            ref: ${{ env.BUILD_REF }}
      -  name: Set up Docker Buildx
         if: ${{ env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id }}
         uses: docker/setup-buildx-action@v2
      -  name: Test docker
         if: ${{ env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id }}
         run: |
            docker pull hello-world > /dev/null
            docker run --rm hello-world > /dev/null
      -  name: Build and export to Docker
         if: ${{ env.CREATE_BUILD && (env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id) }}
         uses: docker/build-push-action@v3
         with:
            context: .
            load: true # If true, once the image has been pulled or built, it will be available from docker
            push: false
            tags: ${{ env.DOCKER_IMAGE_TAG }}
      -  name: Pull image
         if: ${{ !env.CREATE_BUILD && (env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id) }}
         run: |
            docker pull "$DOCKER_IMAGE_TAG"
      -  name: Run
         if: ${{ env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id }}
         run: |
            mkdir "${WORK}/docker-volume"

            # Run tests with docker
            docker run \
               -e CI="$CI" \
               -v "${WORK}/docker-volume:${WORK_DOCKER}/volume" \
               --name bitextor \
               --entrypoint /bin/bash --rm \
               "${DOCKER_IMAGE_TAG}" \
               -c 'bitextor/tests/run-tests.sh -t ${{ matrix.test_id }}; \
                   cp -f '"${WORK_DOCKER}/data/fails.log"' '"${WORK_DOCKER}/volume"' && \
                   rm -rf '"${WORK_DOCKER}/volume/reports"' && \
                   cp -r '"${WORK_DOCKER}/reports"' '"${WORK_DOCKER}/volume"' && \
                   cp -r '"${WORK_DOCKER}/permanent"' '"${WORK_DOCKER}/volume"'' &> ./tests_output

            cat ./tests_output

            # Has the execution failed?
            nolines=$(cat ${WORK}/docker-volume/fails.log | wc -l)

            [[ "$nolines" != "0" ]] && exit "$nolines" || true
      -  name: Print log of tests which failed
         # https://github.com/actions/runner/issues/1173
         #if: ${{ steps.tests.conclusion != 'success' }} # Will this work with matrix as expected (i.e. affect just the specific job and not the rest)?
         if: ${{ always() }}
         run: |
            if [[ -f "${WORK}/docker-volume/fails.log" ]]; then
               while read line; do
                  IFS=$'\t' read -r -a array <<< "$line"
                  status=${array[0]}
                  notest=${array[1]}
                  exit_code=${array[2]}

                  str="# Test $notest (exit code / desc.: $exit_code) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  report_file="${WORK}/docker-volume/reports/${notest}.report"

                  if [[ -f "$report_file" ]]; then
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$report_file"
                  else
                     echo "(warning) No report file found for test $notest (this might be normal depending on the test; check the description)"
                  fi

                  echo ""
               done < "${WORK}/docker-volume/fails.log"
            else
               >&2 echo "ERROR: could not find the file which contain the fails, and should exist"
            fi
      -  name: Upload sent.gz files (artifacts)
         if: ${{ always() }}
         uses: actions/upload-artifact@v3
         with:
            name: all-sent.gz
            path: ${{ env.WORK }}/docker-volume/permanent/**/*.sent.gz
      -  name: Upload report files (artifacts)
         if: ${{ always() }}
         uses: actions/upload-artifact@v3
         with:
            name: reports
            path: ${{ env.WORK }}/docker-volume/reports/*.report
