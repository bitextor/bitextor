name: Intensive tests with conda

on:
   schedule:
      - cron: '0 3 * * 0'
   workflow_dispatch:
      inputs:
         conda_package:
            description: 'Package which will be installed'
            required: false
            default: 'bitextor'
            type: choice
            options:
               - 'bitextor'
               - 'bitextor-nightly'
         conda_version:
            description: 'Version which will be looked for'
            required: false
            default: ''
         conda_build:
            description: 'Build which will be looked for'
            required: false
            default: ''
         create_build:
            type: boolean
            description: 'Create build instead of downloading last package available'
            default: true
         build_ref:
            description: 'Ref to use for local build (i.e. branch, tag or commit)'
            default: 'master'
         test_id:
            description: 'Run specific test ID'
            required: false
            default: 'all'
            type: choice
            options:
               - 'all'
               - '0x01'
               - '0x02'
               - '0x04'
               - '0x08'
               - '0x10'
               - '0x20'
               - '0x40'
               - '0x80'

env:
   WORK: ${{ github.workspace }}
   CONDA_PACKAGE: ${{ github.event.inputs.conda_package || 'bitextor' }}
   CREATE_BUILD: ${{ github.event.inputs.create_build || 'true' }}
   TEST_ID: ${{ github.event.inputs.test_id || 'all' }}
   BUILD_REF: ${{ github.event.inputs.build_ref || 'master' }}

jobs:
   tests:
      name: ${{ matrix.name }}
      runs-on: ubuntu-20.04
      timeout-minutes: 1440
      strategy:
         fail-fast: false # Continue even when a matrix job fails in order to detect as many errors as possible
         matrix:
            include:
               - name: Tests MT
                 test_id: "0x01"
               - name: Tests dictionary based
                 test_id: "0x02"
               - name: Tests generate dictionary
                 test_id: "0x04"
               - name: Tests generate bicleaner model
                 test_id: "0x08"
               - name: Tests generate dictionary and bicleaner model
                 test_id: "0x10"
               - name: Tests combining dictionaries and MT
                 test_id: "0x20"
               - name: Tests neural
                 test_id: "0x40"
               - name: Other tests
                 test_id: "0x80"
      defaults:
         run:
            shell: bash -l {0} # Necessary for https://github.com/conda-incubator/setup-miniconda
      steps:
      -  name: Set up Miniconda
         uses: conda-incubator/setup-miniconda@v2.1.1
         with:
            miniconda-version: "latest"
            python-version: 3.8.5
            activate-environment: bitextor-tests
            channels: conda-forge,bitextor,bioconda,dmnapolitano,esarrias
      -  uses: actions/checkout@v3
         if: ${{ env.CREATE_BUILD == 'true' }}
         with:
            submodules: 'recursive'
            ref: ${{ env.BUILD_REF }}
      -  name: Create Bitextor conda build
         if: ${{ env.CREATE_BUILD == 'true' && (env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id) }}
         working-directory: ./conda-build
         run: |
            ./make_build.sh -n bitextor-pkg -e bitextor-pkg-build -p 3.8 -s -r
      -  name: Install Bitextor locally
         if: ${{ env.CREATE_BUILD == 'true' && (env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id) }}
         run: |
            # Tmp workaround: we install the package in the same environment (waiting answers: https://github.com/conda-incubator/setup-miniconda/issues/221)

            bitextor_package=$(ls "$CONDA_PREFIX/../../envs/bitextor-pkg-build/conda-bld/linux-64" | grep ^bitextor.*[.]tar[.]bz2$ | sort -r | head -n 1)

            conda install -y "$CONDA_PREFIX/../../envs/bitextor-pkg-build/conda-bld/linux-64/$bitextor_package"
            conda update -y --all
            command -v "bitextor" || \
               (>&2 echo "Binary 'bitextor' not available"; exit 1)
      -  name: Install Bitextor from repo
         if: ${{ env.CREATE_BUILD == 'false' && (env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id) }}
         run: |
            v="${{ env.CONDA_PACKAGE }}"

            if [[ "${{ github.event.inputs.conda_version }}" != "" ]]; then
               v="${v}=${{ github.event.inputs.conda_version }}"

               if [[ "${{ github.event.inputs.conda_build }}" != "" ]]; then
                  v="${v}=${{ github.event.inputs.conda_build }}"
               fi
            fi

            conda install -y "$v"
      -  name: Run tests
         id: tests
         if: ${{ env.TEST_ID == 'all' || env.TEST_ID == matrix.test_id }}
         run: |
            "${CONDA_PREFIX}/bitextor/tests/run-tests.sh" -t ${{ matrix.test_id }} -w "$WORK"
      -  name: Print log of tests which failed
         # https://github.com/actions/runner/issues/1173
         #if: ${{ steps.tests.conclusion != 'success' }}
         if: ${{ always() }}
         run: |
            if [[ -f "${WORK}/data/fails.log" ]]; then
               while read line; do
                  IFS=$'\t' read -r -a array <<< "$line"
                  status=${array[0]}
                  notest=${array[1]}
                  exit_code=${array[2]}

                  str="# Test $notest (exit code / desc.: $exit_code) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  report_file="${WORK}/reports/${notest}.report"

                  if [[ -f "$report_file" ]]; then
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$report_file"
                  else
                     echo "(warning) No report file found for test $notest (this might be normal depending on the test; check the description)"
                  fi

                  echo ""
               done < "${WORK}/data/fails.log"
            else
               >&2 echo "ERROR: could not find the file which contain the fails, and should exist"
            fi
      -  name: Upload sent.gz files (artifacts)
         if: ${{ always() }}
         uses: actions/upload-artifact@v3
         with:
            name: all-sent.gz
            path: ${{ env.WORK }}/permanent/**/*.sent.gz
      -  name: Upload report files (artifacts)
         if: ${{ always() }}
         uses: actions/upload-artifact@v3
         with:
            name: reports
            path: ${{ env.WORK }}/reports/*.report
