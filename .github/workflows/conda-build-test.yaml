name: Build and test conda environment

on:
   push:
      paths-ignore:
         - '**.md'
         - 'docs/**'
         - 'img/**'
   pull_request:
      paths-ignore:
         - '**.md'
         - 'docs/**'
         - 'img/**'

env:
   WORK: ${{ github.workspace }}

jobs:
   conda_build_testing:
      name: Build and testing
      runs-on: ubuntu-20.04
      timeout-minutes: 300
      defaults:
         run:
            shell: bash -l {0} # Necessary for https://github.com/conda-incubator/setup-miniconda
      steps:
      -  name: Set up Miniconda
         uses: conda-incubator/setup-miniconda@v2.1.1
         with:
            miniconda-version: "latest"
            python-version: 3.8.5
            activate-environment: bitextor-build
            channels: conda-forge,bitextor,bioconda,dmnapolitano,esarrias
      -  uses: actions/checkout@v3
         with:
            submodules: 'recursive'
      -  name: Create Bitextor conda build
         working-directory: ./conda-build
         run: |
            ./make_build.sh -n bitextor-pkg -e bitextor-pkg-build -p 3.8 -s -r
      -  name: Install Bitextor
         run: |
            # Tmp workaround: we install the package in the same environment (waiting answers: https://github.com/conda-incubator/setup-miniconda/issues/221)

            bitextor_package=$(ls "$CONDA_PREFIX/../../envs/bitextor-pkg-build/conda-bld/linux-64" | grep ^bitextor.*[.]tar[.]bz2$ | sort -r | head -n 1)

            conda install -y "$CONDA_PREFIX/../../envs/bitextor-pkg-build/conda-bld/linux-64/$bitextor_package"
            conda update -y --all
            command -v "bitextor" || \
               (>&2 echo "Binary 'bitextor' not available"; exit 1)
      -  name: Run tests
         id: tests
         run: |
            chmod 775 "$CONDA_PREFIX/bitextor/tests/run-tests-min.sh"
            "$CONDA_PREFIX/bitextor/tests/run-tests-min.sh" -w "$WORK" -j 4
      -  name: Print log of tests which failed
         # https://github.com/actions/runner/issues/1173
         #if: ${{ steps.tests.conclusion != 'success' }}
         if: ${{ always() }}
         run: |
            if [[ -f "${WORK}/data/fails.log" ]]; then
               while read line; do
                  IFS=$'\t' read -r -a array <<< "$line"
                  status=${array[0]}
                  notest=${array[1]}
                  exit_code=${array[2]}

                  str="# Test $notest (exit code / desc.: $exit_code) #"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"
                  echo "$str"
                  eval $(echo printf '"#%0.s"' {1..${#str}}) && printf "\n"

                  report_file="${WORK}/reports/${notest}.report"

                  if [[ -f "$report_file" ]]; then
                     awk -v prefix="(log test $notest)" '{print prefix" "$0}' "$report_file"
                  else
                     echo "(warning) No report file found for test $notest (this might be normal depending on the test; check the description)"
                  fi

                  echo ""
               done < "${WORK}/data/fails.log"
            else
               >&2 echo "ERROR: could not find the file which contain the fails, and should exist"
               exit 1
            fi
      -  name: Upload sent.gz files (artifacts)
         if: ${{ always() }}
         uses: actions/upload-artifact@v3
         with:
            name: all-sent.gz
            path: ${{ env.WORK }}/permanent/**/*.sent.gz
      -  name: Upload report files (artifacts)
         if: ${{ always() }}
         uses: actions/upload-artifact@v3
         with:
            name: reports
            path: ${{ env.WORK }}/reports/*.report
